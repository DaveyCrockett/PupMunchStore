{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\augus\\\\OneDrive\\\\Documents\\\\FSDI\\\\FSDI109\\\\PupMunchStore\\\\src\\\\components\\\\Catalog\\\\catalog.jsx\",\n    _s = $RefreshSig$();\n\nimport ProductCard from './../ProductCard/productCard';\nimport React, { useEffect, useState } from 'react';\nimport DataService from '../../services/dataService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Catalog = () => {\n  _s();\n\n  // state vars are INMUTABLES (can not change)\n  let [products, setProducts] = useState([]);\n\n  const loadCatalog = () => {\n    console.log(\"Catalog component loaded\");\n    let service = new DataService();\n    let data = service.getCatalog();\n    setProducts(data);\n    console.log(\"Retrieved\", data);\n  }; // hook to do something when the component is rendered the first time (only)\n\n\n  useEffect(() => {\n    //do this when the component loads\n    loadCatalog();\n  }, []); // [] = dependencies, when a dependency changes, run the fn again.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"catalog\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"catalogTItle\",\n      children: \"Catalog Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"We have \", products.length, \" amazing products for you\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), products.map(product => /*#__PURE__*/_jsxDEV(ProductCard, {\n      product: product\n    }, product._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 39\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Catalog, \"f86L6rLANGURv6GE6gupp7+oOp4=\");\n\n_c = Catalog;\nexport default Catalog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Catalog\");","map":{"version":3,"sources":["C:/Users/augus/OneDrive/Documents/FSDI/FSDI109/PupMunchStore/src/components/Catalog/catalog.jsx"],"names":["ProductCard","React","useEffect","useState","DataService","Catalog","products","setProducts","loadCatalog","console","log","service","data","getCatalog","length","map","product","_id"],"mappings":";;;AACA,OAAOA,WAAP,MAAwB,8BAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;;AAGA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB;AACA,MAAI,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMK,WAAW,GAAG,MAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,QAAIC,OAAO,GAAG,IAAIP,WAAJ,EAAd;AACA,QAAIQ,IAAI,GAAGD,OAAO,CAACE,UAAR,EAAX;AACAN,IAAAA,WAAW,CAACK,IAAD,CAAX;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBE,IAAzB;AACH,GAND,CAJkB,CAYlB;;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAM,IAAAA,WAAW;AACd,GAHQ,EAGN,EAHM,CAAT,CAbkB,CAgBV;;AACR,sBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,6BAAaF,QAAQ,CAACQ,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGMR,QAAQ,CAACS,GAAT,CAAaC,OAAO,iBAAI,QAAC,WAAD;AAA+B,MAAA,OAAO,EAAEA;AAAxC,OAAkBA,OAAO,CAACC,GAA1B;AAAA;AAAA;AAAA;AAAA,YAAxB,CAHN;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAxBD;;GAAMZ,O;;KAAAA,O;AA0BN,eAAeA,OAAf","sourcesContent":["\r\nimport ProductCard from './../ProductCard/productCard';\r\nimport React, { useEffect, useState } from 'react';\r\nimport DataService from '../../services/dataService';\r\n\r\n\r\nconst Catalog = () => {\r\n    // state vars are INMUTABLES (can not change)\r\n    let [products, setProducts] = useState([]);\r\n\r\n    const loadCatalog = () => {\r\n        console.log(\"Catalog component loaded\");\r\n        let service = new DataService();\r\n        let data = service.getCatalog();\r\n        setProducts(data);\r\n        console.log(\"Retrieved\", data);\r\n    };\r\n\r\n    // hook to do something when the component is rendered the first time (only)\r\n    useEffect(() => {\r\n        //do this when the component loads\r\n        loadCatalog();\r\n    }, []); // [] = dependencies, when a dependency changes, run the fn again.\r\n    return(\r\n        <div className=\"catalog\">\r\n            <h1 className=\"catalogTItle\">Catalog Title</h1>\r\n            <h3>We have {products.length} amazing products for you</h3>\r\n             {products.map(product => <ProductCard key={product._id} product={product}/>)}           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Catalog;"]},"metadata":{},"sourceType":"module"}